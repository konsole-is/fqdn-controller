name: Release

on:
  release:
    types: [published]

jobs:
  release:
    name: Build and Publish Artifacts
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    env:
      TAG: ${{ github.ref_name }}
      IMG: ghcr.io/${{ github.repository }}:${{ github.ref_name }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Import GPG key for Helm signing
        env:
          KEY: ${{ secrets.HELM_GPG_KEYRING }}
          FINGERPRINT: ${{ secrets.HELM_GPG_KEY_FINGERPRINT }}
          PASSPHRASE: ${{ secrets.HELM_GPG_PASSPHRASE }}
        run: |
          # See https://gist.github.com/sourcehawk/ce6346cf0df5e53ced46402b9a1356f2
          echo -n "$KEY" > key.asc
          echo "$PASSPHRASE" | \
          gpg --pinentry-mode loopback --passphrase-fd 0 --import key.asc
          mkdir -p ~/.gnupg-legacy
          chmod 700 ~/.gnupg-legacy
          echo "$PASSPHRASE" | \
          gpg --pinentry-mode loopback --passphrase-fd 0 --export-secret-keys $FINGERPRINT > ~/.gnupg-legacy/secring.gpg
          gpg --export $FINGERPRINT > ~/.gnupg-legacy/pubring.gpg
          chmod 600 ~/.gnupg-legacy/secring.gpg
          chmod 600 ~/.gnupg-legacy/pubring.gpg
          gpg --no-default-keyring --secret-keyring ~/.gnupg-legacy/secring.gpg --list-secret-keys

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: v3.18.4
        id: install

      - name: Install kubebuilder
        run: |
          VERSION=4.6.0
          OS=$(go env GOOS)
          ARCH=$(go env GOARCH)
          curl -L -o kubebuilder "https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${VERSION}/kubebuilder_${OS}_${ARCH}"
          chmod +x kubebuilder && sudo mv kubebuilder /usr/local/bin/

      - name: Generate Kustomize release manifests
        run: |
          make build-installer IMG=${IMG}

      - name: Package helm chart
        env:
          # IMPORTANT NOTE: This must not be the fingerprint but a substring of email/user
          GPG_KEY_UID: ${{ secrets.HELM_GPG_KEY_UID }}
          PASSPHRASE: ${{ secrets.HELM_GPG_PASSPHRASE }}
        run: |
          echo "$PASSPHRASE" | \
          helm package --sign --key "$GPG_KEY_UID" --keyring ~/.gnupg-legacy/secring.gpg --passphrase-file "-" dist/chart
          cp fqdn-controller-${TAG}.tgz chart.tgz
          cp fqdn-controller-${TAG}.tgz.prov chart.tgz.prov
          mv fqdn-controller-${TAG}.tgz dist/
          mv fqdn-controller-${TAG}.tgz.prov dist/

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: make docker-build IMG=${IMG}

      - name: Push Docker image
        run: make docker-push IMG=${IMG}

      - name: Upload release files
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/install.yaml
            dist/crds.yaml
            chart.tgz
            chart.tgz.prov

      - name: Set up Git for GitHub Pages
        if: github.event.release.prerelease == false
        run: |
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global user.name "github-actions"

      - name: Checkout gh-pages branch
        if: github.event.release.prerelease == false
        uses: actions/checkout@v5
        with:
          ref: gh-pages
          path: gh-pages

      - name: Copy Helm chart and update index.yaml
        if: github.event.release.prerelease == false
        run: |
          mkdir -p gh-pages/charts
          cp dist/fqdn-controller-${TAG}.tgz gh-pages/charts/
          cp dist/fqdn-controller-${TAG}.tgz.prov gh-pages/charts/
          cd gh-pages/charts
          helm repo index . --url https://konsole-is.github.io/fqdn-controller/charts

      - name: Push updated Helm repo to gh-pages
        if: github.event.release.prerelease == false
        run: |
          cd gh-pages
          git add charts
          git commit -m "Update Helm repo for ${TAG}" || echo "No changes to commit"
          git push origin gh-pages